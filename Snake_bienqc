# @author : johaGL

import os

# 'strucfile' option must be specified in configfile:
#     note :  a {pair name} example is 'R2' or '2' or equivalent
#   1 -- > if {sampleid}_{pair name}.fastq.gz
#	  examples: D123546_1.fastq.gz , T9_876-sansglu_R1.fastq.gz
#   2 -- > if {sampleid}_{pair name}_{run}.fastq.gz, and {run}
#	  example: T9_876-sansglu_R1_001.fastq.gz , so {run} is '001'


# REMARK: rules have been tested only if 'run' is the same across  all files, or absent

def makelistsunique(FASTQNAMES, PAIRNAMES, RL):
    # FASTQNAMES lists all file names without pair name (== twice sample name). Make it unique SAMPLES:
    SAMPLES = list(set(FASTQNAMES)) # ok unique so we have true sample names in SAMPLES list
    # PAIRNAMES lists n/2 times each pairname, make unique and order into PAIRS
    PAIRS = sorted(set(PAIRNAMES)) # expected result is [ 1,  2 ] or ['R1' , 'R2'] or equivalent
    RUN = sorted(set(RL))
    print(f"  --> detected a number of {len(SAMPLES)} samples (paired-end)")
    print(f"  --> printing a sample name :  {SAMPLES[0]} ")
    print(f"  --> pair names are :  {PAIRS}")
    return SAMPLES, PAIRS, RUN

def pullwildcardsbyopt(strucfile, hoo):
    if strucfile == 1:
        FASTQNAMES, PAIRNAMES, = glob_wildcards(os.path.join(hoo,'{saname}_{pair}.fastq.gz'))
        RL = [ '' ] # empty string in run list means absent {run} in filename
    elif strucfile == 2:
        FASTQNAMES, PAIRNAMES, RL, = glob_wildcards(os.path.join(hoo, '{saname}_{pair}_{run}.fastq.gz'))
    return makelistsunique(FASTQNAMES, PAIRNAMES, RL)

def listOneelemTostrdesired(strucfile, RUN):
    """ requires list to be lenght 1. Yields str preceded by '_' if strucfile is 2"""
    assert len(set(RUN)) == 1, "more than one element, this function NEEDS list length 1"
    if strucfile == 1:
        return RUN[0] # does nothing, kept empty
    elif strucfile == 2:
         return "_"+RUN[0]

##################### Snakefile

strucfile = config['strucfile']
hoo = config['fastqdir']

SAMPLES, PAIRS, RUN, = pullwildcardsbyopt(strucfile, hoo)
assert len(set(RUN)) == 1, "CHECK CODE ! {run} suffix is not a constant, never tested before"
assert len(sorted(set(PAIRS))) == 2, "Error!! PAIRS list must be length 2, and ordered"

RUN = listOneelemTostrdesired(strucfile, RUN)


rule all:
    input:
        expand(config['trimmfqdir']+"{sample}_trimm_{pair}.fastq.gz", sample=SAMPLES, pair=PAIRS),
        expand(config['qc_rappdir']+"{sample}/fastp.{exten}", sample=SAMPLES, exten=['html','json'])


rule fastp:
    input :
        reads1 = hoo+"{sample}_"+PAIRS[0]+RUN+".fastq.gz",
        reads2 = hoo+"{sample}_"+PAIRS[1]+RUN+".fastq.gz"
    output:
        trimm1 = config['trimmfqdir']+"{sample}_trimm_"+PAIRS[0]+".fastq.gz",
        trimm2 = config['trimmfqdir']+"{sample}_trimm_"+PAIRS[1]+".fastq.gz",
        ohtml = config['qc_rappdir']+"{sample}/fastp.html",
        ojson = config['qc_rappdir']+"{sample}/fastp.json"
    message :
        "    **    processing {wildcards.sample}    **    "
    params:
        thr_p = config['fastp']['threads']
    shell:
        "fastp --detect_adapter_for_pe -w {params.thr_p} \
              -i {input.reads1} -I {input.reads2} \
              -o {output.trimm1} -O {output.trimm2} \
              --html {output.ohtml} --json {output.ojson}"
